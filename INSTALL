HOW TO BUILD THE SSRL RTEMS-APPLICATIONS
========================================

$Id: INSTALL,v 1.7 2010/06/04 20:07:46 strauman Exp $

Till Straumann, 2010/01/14

Tools:
------

For building ssrlApps you need the following
tools:

 - usual (cross) compiler toolchain
 - 'ldep' utility from SSRL repository (this
   is an additional build-tool -- however,
   it is only required for the 'GeSys' application,
   i.e., if there is a 'system' subdirectory
   in this directory).

If you work with a CVS checkout then you also
need

 - GNU automake (usually the same version that is required
     by RTEMS -- if you work with a RTEMS CVS checkout, that is)
 - GNU autoconf (usually the same version that is required
     by RTEMS -- if you work with a RTEMS CVS checkout, that is)
 - GNU bison (for cexp)

CVS Checkout and Bootstrapping:
-------------------------------

If you obtained a tar-ball then this step may be skipped.

  > cvs -d /afs/slac/g/spear/cvsrep co -P ssrlApps

Additional BSD networking driver ports can be built
as part of the ssrlApps. However, these drivers are
maintained at the OAR/official RTEMS repository. The
drivers are obtained with the command

  > cd ssrlApps
  > cvs -d :pserver:anoncvs@www.rtems.com:2401/usr1/CVS \
        co -P -d bsd_eth_drivers libbsdport/bsd_eth_drivers

NOTE: It is possible to build only a subset of 'ssrlApps'
(but be aware that internal dependencies exist). Just
remove the packages you do not want. However, you MUST do
so BEFORE creating the 'configure' script (next step).

Likewise, the optional BSD drivers must be installed
into the ssrlApps top source directory BEFORE running
the 'bootstrap' command (next step).

Before the package can be configured the 'configure'
script and a number of templates must be generated from
meta-files that are maintained in CVS. A 'bootstrap'
script takes care of the necessary steps.

  - make sure your PATH finds the required versions of
    GNU automake and autoconf.
  > cd ssrlApps
  > ./bootstrap

Installing the 'ldep' tool
--------------------------

Before the package can be successfully configured all
required tools must be available including the 'ldep'
tool.

Either unpack a tarball or checkout from CVS:

  > cvs -d /afs/slac/g/spear/cvsrep co -P ldep

Again: if you work with a CVS checkout then you need
autoconf/automake and you must execute './bootstrap'
in the 'ldep' top directory before configuring.

Now you 'configure', build and install the 'ldep'
utility. Since 'ldep' is not a 'cross-tool', i.e.,
it doesn't produce any target cpu-specific code
but only text files it does not require any name
transformation (such as 'powerpc-rtems-ldep').

It is recommended to install 'ldep' into the same
directory where the cross-compiler(s) etc. reside.
This can be achieved by giving appropriate
--prefix or --exec-prefix etc options to 'configure'.

Invoking GNU 'configure' for ssrlApps:
--------------------------------------

You are now ready to 'configure' the ssrlApps package:

Prerequisites: you need a working cross-compiler toolchain
as well as RTEMS built and installed for your BSP(s).

1) Make sure PATH contains the toolchain directory.
2) It is a good idea not to clobber the source directory
   tree but to build the package in a 'build' subdirectory
   (which can have an arbitrary name; we shall use 'build'
   here).

      mkdir build
      chdir build
3) Invoke 'configure' providing the desired options
   (which are explained in more detail below).

      <path_to_ssrlApps_top>/configure <configure_options>

   E.g., 

     ../configure --with-rtems-top=/afs/slac/package/rtems/4.9.3/rtems_p0 \
                  --prefix=/my/topdir

4) Execute 'make'

5) Execute 'make install'

Note that for the last steps it is necessary that PATH
still contains the toolchain directory (this is important
if 'make' or 'make install' are re-issued at a later time).
The 'configure' process does NOT store the toolchain
path.

ssrlApps 'configure' options
-----------------------------

ssrlApps' 'configure' script supports quite a few options
so that the package can be taylored to specific needs.
Some of these options are generic, i.e., provided by
automake/autoconf, others are specific to ssrlApps.

Also, some sub-packages (most notably 'cexp' and 'system / GeSys')
provide additional options that are specific to these
packages. Such sub-package specific options may be passed
to the top package (ssrlApps) to be handed down by the
top-level 'configure' script.

In addition to options certain environment variables
affect 'configure'.

Many aspects of 'configure' obey standard 'gnu configure'
semantics - you may want to consult the related 
documentation to familiarize yourself with 'configure'.
In particular, 'configure' as generated by the autoconf/automake
meta-tools.

Type

   <path_to_ssrlApps_top>/configure --help

   <path_to_subpackage_top>/configure --help

to obtain information about supported options and
environment variables.

Options affecting the 'build'
- - - - - - - - - - - - - - -

For building ssrlApps the most important option is

  --with-rtems-top=<rtems_top_dir>

which informs 'configure' where the RTEMS system
directories (includes, libraries, etc.) are located.
Substitute <rtems_top_dir> for the absolute path of the
directory where sub-directories for the RTEMS target
CPUs are installed. This corresponds to the --prefix
value when RTEMS proper was configured (not --prefix
of ssrlApps!).
The layout of an RTEMS installation is as follows:

   <rtems_top_dir>/<cpu>-rtems[vers]/<bsp>/

E.g., if RTEMS was built for i386 and powerpc then
there could be directories

   <rtems_top_dir>/i386-rtems/pc586
   <rtems_top_dir>/powerp-rtems/mvme3100
   <rtems_top_dir>/powerp-rtems/beatnik

By default, ssrlApps are built for all BSPs that
are found in <rtems_top_dir>/<any_cpu>-rtems*/<any_bsp>.

However, the set of BSPs and/or CPU architectures
for which ssrlApps are to be built can be configured
using the --host and/or --enable-rtemsbsp options
reducing them to a subset of the BSPs for which
RTEMS was built.

The latter option may be set to a list of desired BSPs,
e.g.,

   --enable-rtemsbsp='bsp1 bsp2 bsp3' 

If you need additional header files and/or libraries
(i.e., other than what RTEMS proper provides and
what is bundled with ssrlApps) e.g., because
you want to build separate subsets of ssrlApps 
independently then you can specify

   --with-extra-incdirs='path1 path2'
   --with-extra-libdirs='path3 path4'

so that 'configure' knows where to look for
such headers and/or libraries. Note that the specified
paths must not contain any '-I' or '-L' compiler flags.

Options affecting installation paths
- - - - - - - - - - - - - - - - - - -

The installation directories for ssrlApps can be
controlled using the

   --prefix

and related options (these are standard 'gnu configure'
options; consult the related documentation for details).
However, there is an additional option for fine-tuning
the so called 'exec_prefix':

   --with-package-subdir=<package_subdir>

If the user does NOT explicitly set --exec-prefix
then exec_prefix defaults to

    <prefix>/<package_subdir>/<cpu>-rtems[vers]/<bsp>/

where <package_subdir> defaults to 'target/ssrlApps'
(if --with-package-subdir was not given by the user).

Additionally, there is an option

   --enable-std-rtems-installdirs

which results in ssrlApps being installed into the
same directories where RTEMS proper resides.
This has the advantage that 3rd party programs
(e.g., EPICS) depending on ssrlApps do not require
additional -I or -L search paths but has the disadvantage
that it is more difficult to uninstall and maintain
ssrlApps independently from RTEMS (e.g., if you want to
have multiple builds/instances of ssrlApps share a
common RTEMS).

Note that --enable-std-rtems-installdirs sets and
overrides the following options:
   --prefix
   --exec-prefix
   --libdir
   --includedir

The option

	--with-hostbindir=<path>

may be used to define where tools, i.e., programs that
execute on the development platform are to be installed.
Defaults to

   <prefix>/host/${build_alias}/bin
